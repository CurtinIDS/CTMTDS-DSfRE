---
title: "Principles and Practice of Data Visualisation"
format:
  revealjs:
    theme: [default, ../assets/custom.scss]
    footer: "Data Science Transforming Maintenance"
    logo: ../assets/logo.png
    slide-number: true
    show-side-number: all
    include-after-body: ../assets/clean_title_page.html
    echo: true
    # argument for reveal-header
    sc-sb-title: true    
title-slide-attributes:
  data-background-image: ../assets/title_background.png
  data-background-size: contain
  data-background-opacity: "1.0"
# reveal-header extension
filters: 
  - reveal-header
# argument for reveal-header  
slide-level: 2  
jupyter: python3
---


## Module Outline

::: incremental
* Introduction to visualisation
* The importance of visualisation
* Visualisation and EDA
* Elements of visualisation
* Guidelines
* Putting it all together
:::



# Introduction

## Visualisation, understanding, and communication
- Visualisation of data starts with one of two questions:
    - What do I want to know about my data?
    - What do I want to communicate about my data?
- Visualisation is an integral part of the DS workflow
    - Exploratory data analysis
    - Modelling and analysis
    - Communicating results


<!-- Begin old content -->
## Visualisation and data types
- What types of variables/data do you have?
- Numeric or categorical?
- Discrete or continuous?
- Time series, spatial, both?
- Other types?

## Visualisation is not new!


::: {.panel-tabset}

### Broad St Pump

![John Snow's visualisation of cholera outbreaks (1854).](images/snow_map.jpg){fig-align="center" width="400px"}

### La grande armée

![Charles Minard and the destruction of Napoléon's army (1869).](images/Minard.jpg){fig-align="center" height="380px"}

### Contemporary 

![Van Panhuis, W.G. et al. (2013) _NEJM_](images/Measles.png){fig-align="center" height="390px"}

:::

# The importance of visualisation

## The _Challenger_ disaster

![](images/challenger.jpg){fig-align="center"}

## _Challenger_: The background

::: {style="font-size: 95%"}
* Engineers at Morton Thiokol, who supplied solid rocket motors to NASA, recommended that the launch be delayed because cold weather would jeopardize the stability of O-rings
* Their recommendations were overruled due to lack of persuasive evidence, and 73 seconds after launch, Challenger exploded
* According to Tufte (1997), the evidence was in the form of hand-written tables, but none was graphical, and they failed to convince NASA to delay the launch
:::

## _Challenger_: Tables, not plots

:::: {.columns}

::: {.column width="50%"}
![](images/challenger_chart.png)
:::

::: {.column width="50%"}
![](images/challenger2.png)
:::

::::

## _Challenger_: Critiques by Tufte (1997)

::: {style="font-size: 95%"}
* The tables (charts) that were discussed at meetings made it difficult to see bivariate (temperature/failure) relationships
* Anecdotal evidence
  * With small sample size, anecdotal evidence can be particularly challenging to refute
  * Engineers argued that SRM-15 had the most damage on the coldest previous launch date, NASA officials countered that SRM-22 had almost as much damage on one of the warmer launch dates
* Plotting the data tells a different story!
:::

## _Challenger_: Plotting O-ring damage

![](images/challenger_plot.png)

## _Challenger_ (1986)

![](images/challenger_explosion2.jpg){fig-align="center"}

# Visualisation and EDA

## Exploratory data analysis (EDA)

:::: {.columns}

::: {.column width="50%"}
::: {style="font-size: 85%"}
* "Exploratory data analysis is an attitude, a state of flexibility, a willingness to look for those things that we believe are not there, as well as those we believe are there."
* "The greatest value of a picture is when it forces us to notice what we never expected to see."

<div style="text-align: left;">
John Tukey (1915-2015)
</div>

:::
:::

::: {.column width="40%"}
![](images/Tukey.png)
:::

::::

## EDA 

::: {style="font-size: 75%"}
* Consists of a large set of ill-defined visual tools to explore data as a prelude to postulating models or methods of analysis
* Could argue that data-wrangling overlaps with EDA
* Basic tools are plots, graphs, and summary statistics
* No step-by-step method, but does involve systematically going through the data to understand it
  * Distributions of variables
  * Relationships in time
  * Relationships among variables
* Missing values/incorrect or nonsensical data
* Exploratory analysis is by its nature _iterative_
:::

## EDA

::: {style="font-size: 85%"}
* As much of a mindset as a set of tools
* Try to understand the data – gain intuition, understand the process that generated it
* ‘Sanity-checking’
* Making sure that the data is on the scale you expect
* Look for patterns
  * May be meaningful, but could also indicate something wrong in the data!
* Above all, EDA is between you and the data – for you to understand what’s going on
:::

# Elements of visualisation

## A taxonomy of elements

* Scale

* Conditioning

* Perception—colour and length

* Transformations

* Context

* Smoothing and other large data considerations

## Scale

::: {style="font-size: 90%"}
* In any plots, choose axis limits to fill the plotting region

* If necessary, make multiple plots of different regions to focus on important features that may not be visible in a single plot

* Is the plot constructed in a way that matches viewers’ expectations?
  * Do the axes increase in an expected way?

* Don’t confuse the viewer!
  * Scales changes mid-axis
  * Two different scales on the same axis
:::

## What's misleading about this?

![](images/FloridaGunDeaths.jpg){fig-align="center"}

## Conditioning

::: {style="font-size: 95%"}
* In any large and complex dataset, there will likely be different relationships among variables in different subgroups of the data
  * Construct side-by-side scatterplots, histograms, boxplots, etc. but keep scales the same to make comparisons easier
  * If representing on the same plot, use different colours and symbols to represent different groups
  * Use scatterplot smoothers to guide the viewer’s eye
* In the measles example, some grouping according to region was carried out
:::

## Example of conditioning

::: {.panel-tabset}

### w/o Conditioning

![](images/Gapminder1.png){fig-align="center" height="450px"}

### w/ Conditioning

![](images/Gapminder2.png){fig-align="center" height="450px"}

:::

## Perception: colour

::: {style="font-size: 90%"}
* Colour lets you see an extra dimension
* Colour plots are much more common, but being able to choose a palette of colours is not a straightforward task
* Saturated (bright) colours tend to be difficult to look at for long periods of time
* Keep in mind that some people are colour-blind
* Use existing colour palettes rather than creating your own
* Decide whether to use a sequential colour scheme or one where low and high values should be highlighted?
:::

## Colour palettes in `seaborn`

![](images/seaborn_palettes.png){fig-align="center" height="450px"}

::: {style="font-size: 50%"}
[https://bilarasa.com/seaborn-color-palette-complete-guide-on-seaborn-color-palette/](https://bilarasa.com/seaborn-color-palette-complete-guide-on-seaborn-color-palette/)
:::

## Palette for high and low values

![Lehmann, E. A., Phatak, A. Stephenson, A. and Lau, R. (2016). _Environmetrics_, **27**, 239--251.](images/Extremes.png){fig-align="center"}


## Perception: Length

::: {style="font-size: 90%"}
* We are pretty good at judging length visually, by comparison to area, volumes, or angles
* Practical consequence
  * Bar charts are to be preferred to pie charts
* Practical considerations
  * Visually, the longer a bar, the greater the absolute value it represents
  * Can be vertical or horizontal
  * To judge magnitude, bars must represent the entire length, not just a portion
:::


## Length: Spot the difference

![](images/Barchart.png){fig-align="center"}

## Length or area?

<center>

</center>

![](images/Africa.png){fig-align="center" width="900px"}

## Transformations

* Sometimes, curvilinear bivariate relationships can be straightened out by transforming one or more variables
  * Easier to interpret than nonlinear relationship
  * Prior to regression
* Transformations can be useful when 
  * The data covers several orders of magnitude
  * Data is ‘squashed in’


## Tukey-Mosteller's bulging rule

:::: {.columns}

::: {.column width="50%"}
![](images/BulgingRule.png)
:::

::: {.column width="50%"}

::: {style="font-size: 80%"}
* Tukey and Mosteller, a couple of statisticians, came up with some guidelines for how to choose transformations to help 'straighten-out' a plot of two variables
* For example, if you have data in the first quadrant, try transformations along the positive $Y$-axis or $X$-axis or both
:::

:::

::::

## Example: Bulging rule

:::: {.columns}

::: {.column width="50%"}
![](images/Bulging1.png){height="500px"}
:::

::: {.column width="50%"}
![](images/Bulging2.png){height="500px"}
:::

::::

## Example: Logarithmic transformation

::: {.panel-tabset}

### Moore's Law


* 'Moore's Law' is the observation that the number of transistors in an integrated circuit doubles about every two years
* Not so much a law as an empirical observation
* Let's visualise it in two ways

### Linear plot

```{python}
# | echo: false
# | output: false
# Moores law
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import locale

locale.setlocale(locale.LC_ALL, "")
fig = plt.figure(figsize=(12, 6), dpi=300)
ax = plt.gca()
df = pd.read_csv("../data/Transistor_count_2.csv")
plt.scatter(
    df["Year"].astype(int),
    df["Transistor count"].map(locale.atof).astype(float),
    s=5,
    linewidth=0.8,
    c="red",
    marker="x",
)
plt.xticks(rotation=90)

plt.ylabel("Transistor Count")
plt.title("Number of transistors on a microprocessor - linear-linear showcase of Moores Law")
plt.xlabel("Year")
ax = plt.gca()
plt.grid()
ax.ticklabel_format(useOffset=False)
ax.axis([1969, 2026, 0, 1.5 * 10**11])
plt.savefig("./images/moore_1.png")
plt.close()
```

![](images/moore_1.png){height="400px" fig-align="center"}

### Logarithmic plot

```{python}
#| echo: false
#| output: false
# Moores law
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import locale
locale.setlocale(locale.LC_ALL, '')
fig = plt.figure(figsize=(12,6), dpi=300)
ax = plt.gca()
df = pd.read_csv('../data/Transistor_count_2.csv')
plt.scatter(df['Year'].astype(int), df['Transistor count'].map(locale.atof).astype(float), s=5, linewidth=0.8, c='red', marker='x')
plt.xticks(rotation=90)
plt.yticks(rotation=5)
ax.set_yscale('log')
plt.grid()

plt.ylabel("Transistor Count")
plt.title("Number of transistors on a microprocessor - log-linear showcase of Moores Law   ")
plt.xlabel("Year")
ax.axis([1969, 2026, 10**3, 2*10**11])
plt.savefig('./images/moore_2.png')
plt.close()
```
![](images/moore_2.png){height="400px" fig-align="center"}

:::

## Context

* Context is information that leads to a better understanding of the who, what, where, and why of your graphic, e.g., 
  * Axes labels
  * Units of measurements
  * Label points of unusual interest, 
  * Depending on broader context in which the graphic is appearing, a caption describing the data and important features may be necessary

## Large datasets

* Split the data into natural subgroups (conditioning) before plotting
* Use transparent colours
* Consider adding a scatterplot smoother to help guide the viewer’s eye

## Cherry Blossom Run (Washington, DC)

::: {.panel-tabset}

### All data

![](images/CherryBlossom_All.png){fig-align="center" height="450px"}

### Conditioning and transparency

![](images/CherryBlossom_condition.png){fig-align="center" height="450px"}

### Smoothing

![](images/CherryBlossom_smoother.png){fig-align="center" height="450px"}

:::

## Guidelines

Nolan (2017)

* Chose scales appropriately
* Avoid having other graph elements interfere with the data
* Use visually prominent symbols
* Eliminate superfluous material—'chart junk' as in the _Challenger_ graphics
* Where possible, avoid plotting points on top of one another—use jittering


## Guildelines (continued)

* Put juxtaposed plots on the same scale
* Make it easy to distinguish elements of superposed plots, e.g., colour, line type
* Avoid stacking
* Avoid areas, volumes
* Don’t break visual metaphor, i.e., if using rectangles, then area should correspond to the value of the variable you’re trying to represent, not the length of one of the sides

## Guidelines (continued)

* Describe what you want the reader to see in the caption
* Use informative labels and legends
* Use colour and plotting symbols to add more context
* Plot the same thing in many ways/scales, but not on the same plot!


# Putting it all together

## Visualising Belt Wear

```{python}
#| echo: false

import pandas as pd

df = pd.read_csv('data/belt.csv')
df['Test Date'] = pd.to_datetime(df['Test Date'])

# print(f'{df.head()}\n')
# print(f'{df.tail()}\n')
```


```{python}
#| echo: false

df['Relative Test Date'] = (df['Test Date'] - df['Test Date'].min()).dt.days
# print(df.tail())
```


<center>
```{python}
# | echo: false
import matplotlib.pyplot as plt

for date in df["Relative Test Date"].unique():
    df_date = df[df["Relative Test Date"] == date]
    plt.plot(df_date["X"], df_date["Result"], label=date, marker="o", linestyle="dashed")

plt.ylim(bottom=0)
plt.legend(title="Days since installation")

plt.xlabel("Length along belt (mm)")
plt.ylabel("Thickness (mm)")
plt.title("Thickness of a Belt Over Time (Days Since Installation)")
plt.show()
```
</center>


## Improving the visualisation

<center>

```{python}
# | echo: false
import matplotlib.pyplot as plt

cmap = plt.get_cmap(name="viridis")
colors = cmap(df["Relative Test Date"].unique())

for i, date in enumerate(df["Relative Test Date"].unique()):
    df_date = df[df["Relative Test Date"] == date]
    plt.plot(df_date["X"], df_date["Result"], label=date, marker="o", linestyle="dashed", color=colors[i],)

plt.ylim(bottom=0)
plt.legend(title="Days since installation")

plt.xlabel("Length along belt (mm)")
plt.ylabel("Thickness (mm)")
plt.title("Thickness of a Belt Over Time (Days Since Installation)")
plt.show()
```

</center>

## Getting fancy: animation

<!-- Fake cell to make code cleaner -->
```{python}
# | echo: false
# | output: false
import plotly.express as px

fig = px.area(
    df, x="X", y="Result", animation_frame="Relative Test Date",
    labels={"X": "Length along belt (mm)", "Result":"Thickness (mm)"}
)
fig.show()
```

<center>

<!-- Real cell with delayed animation time -->
```{python}
# | echo: false
# | output: true
import plotly.express as px


fig = px.area(
    df, x="X", y="Result", animation_frame="Relative Test Date",
    labels={"X": "Length along belt (mm)", "Result":"Thickness (mm)"}
)
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1500
fig.show()
```

</center>


## Further viewing

![](images/FlowingData_25.png)

::: {style="font-size: 50%"}
Source: [FlowingData](https://flowingdata.com/2017/01/24/one-dataset-visualized-25-ways/)
::: 

## Further reading: some caveats

![](images/caveats.png){fig-align="center" height="450px"}

::: {style="font-size: 50%"}
Source: [FlowingData](https://www.data-to-viz.com/caveats.html)
::: 





<!--  -->